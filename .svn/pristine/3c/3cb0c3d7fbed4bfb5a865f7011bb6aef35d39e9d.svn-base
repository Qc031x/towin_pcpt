package com.sgfm.datacenter.action.payment;

import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.annotation.PostConstruct;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.sgfm.base.action.BaseAction;
import com.sgfm.base.util.PropsLoader;
import com.sgfm.datacenter.alipay.config.AlipayConfig;
import com.sgfm.datacenter.alipay.util.AlipayNotify;
import com.sgfm.datacenter.alipay.util.AlipaySubmit;
import com.sgfm.datacenter.exception.AppException;
import com.sgfm.datacenter.sys.WapUnionPay;
import com.sgfm.datacenter.util.JsonResponseResult;
import com.tencent.WXPay;
import com.tencent.business.ScanPayBusiness.ResultListener;
import com.tencent.common.RandomStringGenerator;
import com.tencent.common.Signature;
import com.tencent.common.XMLParser;
import com.tencent.protocol.order.ResultListenerImpl2;
import com.tencent.protocol.order.ScanAddOrderReqData;
import com.unionpay.acp.sdk.SDKConstants;

import net.sf.json.JSONObject;

/**
 * 支付Action(商城)
 * @author cliu
 * @date 2015年6月16日11:33:58
 */

@Controller
@Scope("prototype")
public class PayMentAction extends BaseAction {
	
//	private static final long serialVersionUID = 1L;
//	private Log logger = LogFactory.getLog(this.getClass());
//	public TPorder order = new TPorder();// 字典实体
//	public TPorderLine orderLine = new TPorderLine();
//	String appid = "wx5fe648be5a0c3aef";
//	@Autowired
//	private OrderService orderService;
//	static String indexUrl = "";
//
//	String payType = "";
//	@Autowired
//	private PropsLoader propsLoader;
//
//	private static final String TOKEN = "P9dQwT5GtSIJTn9g";
//
//	@PostConstruct
//	public void init() {
//
//		payType = propsLoader.props.getProperty("yk.payType");
//		indexUrl = propsLoader.props.getProperty("ykMall.url");
//	}
//
//	// 支付宝wap支付
//	public String aliPayWap() {
//		JsonResponseResult result = null;
//		try {
//
//			Map<String, String> map = new HashMap<String, String>();
//			TPorder orderTemp = orderService.findMallOrderByOid(String.valueOf(order.getOid()));
//
//			if (orderTemp == null)
//				return null;
//			if (orderTemp.getSumPrice() <= 0)
//				return null;
//
//			//////////////////////////////////// 请求参数//////////////////////////////////////
//			HttpServletRequest request = getRequest();
//			// 支付类型
//			String payment_type = "1";
//			// 必填，不能修改
//			// 服务器异步通知页面路径
//			String notify_url = indexUrl + "core/payMent.aliPayAsynback.do";
//			// 需http://格式的完整路径，不能加?id=123这类自定义参数
//
//			// 页面跳转同步通知页面路径
//			String return_url = indexUrl + "core/payMent.aliPaySynback.do";
//			// 需http://格式的完整路径，不能加?id=123这类自定义参数，不能写成http://localhost/
//
//			// 商户订单号
//			String out_trade_no = String.valueOf(order.getOid());
//			// 商户网站订单系统中唯一订单号，必填
//
//			// 订单名称
//			// String subject = order.getName();
//			String subject = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + "殷康体检套餐";
//			// 必填
//
//			// 付款金额
//			// String total_fee = "0.01"; //投入生产后，放开;
//			String total_fee = String.valueOf(orderTemp.getSumPrice());
//			if (payType.equals("T"))
//				total_fee = "0.01"; // 生产环境中需要注释
//			// 必填
//
//			// 商品展示地址
//			// String show_url = "http://n.1k360.com/";
//
//			// String show_url
//			// ="http://n.1k360.com//core/order.closeOrderFromCenter.do?order.oid="+out_trade_no;
//			// 必填，需以http://开头的完整路径，例如：http://www.商户网址.com/myorder.html
//
//			// 订单描述
//			// String body = new
//			// String(request.getParameter("WIDbody").getBytes("ISO-8859-1"),"UTF-8");
//			// 选填
//
//			// 超时时间
//			// String it_b_pay = new
//			// String(request.getParameter("WIDit_b_pay").getBytes("ISO-8859-1"),"UTF-8");
//			// 选填
//
//			// 钱包token
//			// String extern_token = new
//			// String(request.getParameter("WIDextern_token").getBytes("ISO-8859-1"),"UTF-8");
//			// 选填
//
//			//////////////////////////////////////////////////////////////////////////////////
//
//			// 把请求参数打包成数组
//			Map<String, String> sParaTemp = new HashMap<String, String>();
//			sParaTemp.put("service", "alipay.wap.create.direct.pay.by.user");
//			sParaTemp.put("partner", AlipayConfig.partner);
//			sParaTemp.put("seller_id", AlipayConfig.seller_id);
//			sParaTemp.put("_input_charset", AlipayConfig.input_charset);
//			sParaTemp.put("payment_type", payment_type);
//			sParaTemp.put("notify_url", notify_url);
//			sParaTemp.put("return_url", return_url);
//			sParaTemp.put("out_trade_no", out_trade_no);
//			sParaTemp.put("subject", subject);
//			sParaTemp.put("total_fee", total_fee);
//			// sParaTemp.put("show_url", show_url);
//			// sParaTemp.put("body", body);
//			// sParaTemp.put("it_b_pay", it_b_pay);
//			// sParaTemp.put("extern_token", extern_token);
//
//			// 建立请求
//			String sHtmlText = AlipaySubmit.buildRequest(sParaTemp, "get", "确认");
//			map.put("payHtml", sHtmlText);
//			map.put("result", "1");
//
//			super.jsonResult = JSONObject.fromObject(map).toString();
//			logger.info("支付宝支付：aliPayWap：" + jsonResult);
//			logger.info("json支付宝html: " + jsonResult);
//		} catch (final AppException app) {
//			this.logger.error(app);
//			final String msg = this.getText(app.getMessage());
//			result = JsonResponseResult.createFalied(msg);
//			super.jsonResult = JSONObject.fromObject(result).toString();
//		} catch (final Exception e) {
//			this.logger.error(e);
//			final String msg = this.getText("com.sgfm.datacenter.action.payment.PayMentAction.exception");
//			result = JsonResponseResult.createFalied(msg);
//			super.jsonResult = JSONObject.fromObject(result).toString();
//		}
//		this.logger.debug("action:" + this.jsonResult);
//		return BaseAction.JSON;
//	}
//
//	// 支付宝同步回调
//	public String aliPaySynback() {
//		// JsonResponseResult result = null;
//		logger.info("进入支付宝回调aliPaySynback beg：");
//		// Map <String,String>map=new HashMap<String,String>();
//		try {
//			Map<String, String> params = new HashMap<String, String>();
//			Map requestParams = this.getRequest().getParameterMap();
//			for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {
//				String name = (String) iter.next();
//				String[] values = (String[]) requestParams.get(name);
//				String valueStr = "";
//				for (int i = 0; i < values.length; i++) {
//					valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + ",";
//				}
//				// 乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化
//				valueStr = new String(valueStr.getBytes("ISO-8859-1"), "utf-8");
//				params.put(name, valueStr);
//			}
//			logger.info("获取支付宝回调aliPaySynback后，传递来的参数params：" + params);
//			// 获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)//
//			// 商户订单号
//
//			String out_trade_no = new String(this.getRequest().getParameter("out_trade_no").getBytes("ISO-8859-1"),
//					"UTF-8");
//
//			// 支付宝交易号
//
//			String trade_no = new String(this.getRequest().getParameter("trade_no").getBytes("ISO-8859-1"), "UTF-8");
//
//			// 交易状态
//			String trade_status = new String(this.getRequest().getParameter("trade_status").getBytes("ISO-8859-1"),
//					"UTF-8");
//			logger.info("out_trade_no,trade_no,trade_status==" + out_trade_no + "-" + trade_no + "_" + trade_status);
//			// 获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//
//			// logger.info("aliPaySynback->params=="+params);
//			// 计算得出通知验证结果
//			/*
//			 * boolean verify_result = AlipayNotify.verify(params);
//			 * 
//			 * if(verify_result){//验证成功
//			 * logger.info("aliPaySynback中的调用：verify_result验证成功");
//			 * 
//			 * if(trade_status.equals("TRADE_FINISHED") ||
//			 * trade_status.equals("TRADE_SUCCESS")){
//			 * logger.info("aliPaySynback中的调用：trade_status验证成功,trade_status验证成功"
//			 * );
//			 * 
//			 * logger.info("aliPaySynback中的调用:根据订单id获取订单信息beg."); order =
//			 * orderService.findMallOrderByOid(out_trade_no);
//			 * logger.info("aliPaySynback中的调用:根据订单id获取订单信息end："+order);
//			 * 
//			 * }
//			 * 
//			 * 
//			 * }else{ //该页面可做页面美工编辑
//			 * this.getResponse().getWriter().println("验证失败"); }
//			 */
//			logger.info("aliPaySynback后，获取订单信息");
//			order = orderService.findMallOrderByOid(out_trade_no);
//			HashMap<String, Object> map = orderService.checkMallCount(out_trade_no);
//
//			this.getRequest().setAttribute("order", order);
//			this.getRequest().setAttribute("map", map);
//
//		} catch (final AppException app) {
//			this.logger.error(app);
//
//		} catch (final Exception e) {
//			this.logger.error(e);
//
//		}
//		this.logger.debug("action:" + this.jsonResult);
//		logger.info("aliPaySynback后，准备跳转到提示用户收款成功界面!!");
//		return super.toContentView("payMent", "mallPay_success");
//		// return BaseAction.JSON;
//	}
//
//	// 支付宝异步回调，改变订单状态
//	public String aliPayAsynback() throws ServletException, IOException {
//		logger.info("aliPayAsynback接收后台通知开始：编码:" + SDKConstants.param_encoding);
//
//		// 获取支付宝POST过来反馈信息
//		Map<String, String> params = new HashMap<String, String>();
//		Map requestParams = this.getRequest().getParameterMap();
//		for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {
//			String name = (String) iter.next();
//			String[] values = (String[]) requestParams.get(name);
//			String valueStr = "";
//			for (int i = 0; i < values.length; i++) {
//				valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + ",";
//			}
//			// 乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化
//			// valueStr = new String(valueStr.getBytes("ISO-8859-1"), "gbk");
//			params.put(name, valueStr);
//		}
//
//		// 获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)//
//		// 商户订单号
//
//		String out_trade_no = new String(this.getRequest().getParameter("out_trade_no").getBytes("ISO-8859-1"),
//				"UTF-8");
//
//		// 支付宝交易号
//
//		String trade_no = new String(this.getRequest().getParameter("trade_no").getBytes("ISO-8859-1"), "UTF-8");
//
//		// 交易状态
//		String trade_status = new String(this.getRequest().getParameter("trade_status").getBytes("ISO-8859-1"),
//				"UTF-8");
//
//		// 支付金额
//		String total_fee = new String(this.getRequest().getParameter("total_fee").getBytes("ISO-8859-1"), "UTF-8");
//		// beg 如果该订单已经处理了，则不用重复处理
//		TPorder orderTemp = orderService.findMallOrderByOid(out_trade_no);
//		if (orderTemp == null)
//			return null;
//		if (orderTemp.getPayStatus() == 2) {
//			return null;
//		}
//
//		// end 如果该订单已经处理了，则不用重复处理
//
//		// 获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//
//		logger.info("aliPayAsynback的调用：out_trade_no,trade_no,trade_status==" + out_trade_no + "-" + trade_no + "_"
//				+ trade_status);
//		logger.info("aliPayAsynback的调用：->params==" + params);
//		if (AlipayNotify.verify(params)) {// 验证成功
//			logger.info("aliPayAsynback中的调用：verify_result验证成功");
//			// 请在这里加上商户的业务逻辑程序代码
//
//			// ——请根据您的业务逻辑来编写程序（以下代码仅作参考）——
//			if (trade_status.equals("TRADE_FINISHED") || trade_status.equals("TRADE_SUCCESS")) {
//				logger.info("aliPayAsynback调用trade_status验证成功,trade_status验证成功");
//				// 判断该笔订单是否在商户网站中已经做过处理
//				// 如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
//				// 如果有做过处理，不执行商户的业务程序
//				logger.info("aliPayAsynback调用:根据订单id获取订单信息beg.");
//				params.put("wap_pay_type", "10111");
//				params.put("orderId", out_trade_no);
//				params.put("total_fee", total_fee);
//				orderService.updateMallOrder(params);
//				logger.info("aliPayAsynback调用:根据订单id获取订单信息end：");
//				// }
//			}
//
//			this.getResponse().getWriter().println("success"); // 请不要修改或删除
//
//		} else {// 验证失败
//			this.getResponse().getWriter().println("fail");
//		}
//
//		logger.info("aliPayAsynback接收后台通知结束");
//
//		/*
//		 * logger.info("aliPayAsynback 发送短信beg");
//		 * 
//		 * String infoBack = this.SendOrderMsg(out_trade_no);
//		 * logger.info(infoBack);
//		 * 
//		 * logger.info("aliPayAsynback 发送短信end");
//		 */
//		return "";
//	}
//
//	// 银联wap支付
//	public String unionpayWap() {
//		JsonResponseResult result = null;
//		Map<String, String> map = new HashMap<String, String>();
//		Map<String, String> payMap = new HashMap<String, String>();
//		try {
//			// WapUnionPay apUnionPay =new WapUnionPay();
//			payMap.put("oId", String.valueOf(order.getOid()));
//			TPorder orderTemp = orderService.findMallOrderByOid(String.valueOf(order.getOid()));
//			if (orderTemp == null)
//				return null;
//			if (orderTemp.getSumPrice() <= 0)
//				return null;
//			// 投入生产后，放开
//
//			int tAmt = 0;
//			double d = orderTemp.getSumPrice();
//
//			if (payType.equals("T"))
//				d = 0.1; // 生产环境中需要注释
//
//			if (d == 0.1) {
//				payMap.put("sum_price", "10");
//			} else {
//				tAmt = (int) d;
//				payMap.put("sum_price", String.valueOf(tAmt * 100));
//			}
//			// payMap.put("sum_price", "1");
//			String payHtml = WapUnionPay.getPayHtml(payMap, indexUrl);
//			map.put("payHtml", payHtml);
//			map.put("result", "1");
//
//			super.jsonResult = JSONObject.fromObject(map).toString();
//			logger.info("银联支付unionpayWap：" + jsonResult);
//			logger.info("3333 " + jsonResult);
//		} catch (final AppException app) {
//			this.logger.error(app);
//			final String msg = this.getText(app.getMessage());
//			result = JsonResponseResult.createFalied(msg);
//			super.jsonResult = JSONObject.fromObject(result).toString();
//		} catch (final Exception e) {
//			this.logger.error(e);
//			final String msg = this.getText("com.sgfm.datacenter.action.payment.PayMentAction.exception");
//			result = JsonResponseResult.createFalied(msg);
//			super.jsonResult = JSONObject.fromObject(result).toString();
//		}
//		this.logger.debug("action:" + this.jsonResult);
//		return BaseAction.JSON;
//	}
//
//	// 银联同步回调
//	public String synback() {
//		// JsonResponseResult result = null;
//		logger.info("进入银联回调synback beg：");
//		// Map <String,String>map=new HashMap<String,String>();
//		try {
//			Map<String, String> respParam = getAllRequestParam(this.getRequest());
//
//			Map<String, String> valideData = new HashMap<String, String>();
//			StringBuffer page = new StringBuffer();
//			if (null != respParam && !respParam.isEmpty()) {
//				Iterator<Entry<String, String>> it = respParam.entrySet().iterator();
//				while (it.hasNext()) {
//					Entry<String, String> e = it.next();
//					String key = (String) e.getKey();
//					String value = (String) e.getValue();
//					page.append("<tr><td width=\"30%\" align=\"right\">" + key + "(" + key + ")</td><td>" + value
//							+ "</td></tr>");
//					valideData.put(key, value);
//				}
//			}
//			logger.info("进入银联synback 获取银联回调传递的参数  valideData：" + valideData);
//			if (valideData.get("merId").equals("898440380110216")) {
//				logger.info("根据订单id获取订单和订单项信息beg.");
//				order = orderService.findMallOrderByOid(respParam.get("orderId").toString());
//				Map map = orderService.checkMallCount(respParam.get("orderId").toString());
//				logger.info("根据订单id获取订单信息end：" + order);
//				logger.info("根据订单id获取订单项信息end：" + map);
//				this.getRequest().setAttribute("map", map);
//			}
//			//
//
//			this.getRequest().setAttribute("order", order);
//
//			logger.info("进入银联回调synback->end：" + page.toString());
//		} catch (final AppException app) {
//			this.logger.error(app);
//			// final String msg = this.getText(app.getMessage());
//			// result = JsonResponseResult.createFalied(msg);
//			// super.jsonResult = JSONObject.fromObject(result).toString();
//		} catch (final Exception e) {
//			this.logger.error(e);
//			// final String msg =
//			// this.getText("com.sgfm.datacenter.action.payment.PayMentAction.exception");
//			// result = JsonResponseResult.createFalied(msg);
//			// super.jsonResult = JSONObject.fromObject(result).toString();
//		}
//		this.logger.debug("action:" + this.jsonResult);
//		return super.toContentView("payMent", "mallPay_success");
//		// return BaseAction.JSON;
//	}
//
//	// 银联异步后台回调，改下订单状态
//	public String asyback() throws ServletException, IOException {
//		logger.info("BackRcvResponse接收后台通知开始：编码:" + SDKConstants.param_encoding);
//
//		this.getRequest().setCharacterEncoding("UTF-8");
//		String encoding = this.getRequest().getParameter(SDKConstants.param_encoding);
//		// 获取请求参数中所有的信息
//		Map<String, String> reqParam = getAllRequestParam(this.getRequest());
//		// 打印请求报文
//		// LogUtil.printRequestLog(reqParam);
//
//		Map<String, String> valideData = null;
//		if (null != reqParam && !reqParam.isEmpty()) {
//			Iterator<Entry<String, String>> it = reqParam.entrySet().iterator();
//			valideData = new HashMap<String, String>(reqParam.size());
//			while (it.hasNext()) {
//				Entry<String, String> e = it.next();
//				String key = (String) e.getKey();
//				String value = (String) e.getValue();
//				value = new String(value.getBytes("UTF-8"), encoding);
//				valideData.put(key, value);
//			}
//		}
//		logger.info(
//				"进入银联asyback异步回调.参数  valideData：" + valideData + "\n valideData.get(merId)=" + valideData.get("merid"));
//		// beg 如果该订单已经处理了，则不用重复处理
//		TPorder orderTemp = orderService.findMallOrderByOid(valideData.get("orderId"));
//		if (orderTemp == null)
//			return null;
//		if (orderTemp.getPayStatus() == 2) {
//			return null;
//		}
//
//		// end 如果该订单已经处理了，则不用重复处理
//
//		/*
//		 * Map<String, String> valideData=new HashMap<String, String>();
//		 * valideData.put("orderId", "2043510671"); valideData.put("merId",
//		 * "898440380110216");
//		 */
//		// 如果是银联发起的回调，并且商户号是一康商户
//		if (valideData.get("merId").equals("898440380110216")) {
//			logger.info("beg 获取银联回调后执行修改订单状态,订单oid:" + valideData.get("orderId"));
//			valideData.put("wap_pay_type", "10110");
//			double total_fee = Double.parseDouble(valideData.get("settleAmt")) / 100;
//			valideData.put("total_fee", String.valueOf(total_fee));
//			orderService.updateMallOrder(valideData);
//			logger.info("end 获取银联回调后执行修改订单状态,订单oid:" + valideData.get("orderId"));
//		}
//
//		logger.info("BackRcvResponse接收后台通知结束");
//
//		/*
//		 * logger.info("asyback 发送短信beg");
//		 * 
//		 * String infoBack =
//		 * this.SendOrderMsg(valideData.get("orderId").toString());
//		 * logger.info(infoBack);
//		 * 
//		 * logger.info("asyback 发送短信end");
//		 */
//		return "";
//	}
//
//	public static Map<String, String> getAllRequestParam(final HttpServletRequest request) {
//		Map<String, String> res = new HashMap<String, String>();
//		Enumeration<?> temp = request.getParameterNames();
//		if (null != temp) {
//			while (temp.hasMoreElements()) {
//				String en = (String) temp.nextElement();
//				String value = request.getParameter(en);
//				res.put(en, value);
//				// 在报文上送时，如果字段的值为空，则不上送<下面的处理为在获取所有参数数据时，判断若值为空，则删除这个字段>
//				if (res.get(en) == null || "".equals(res.get(en))) {
//					// System.out.println("======为空的字段名===="+en);
//					res.remove(en);
//				}
//			}
//		}
//		return res;
//	}
//
//	// 根据openid调用微信统一下单接口获取prepayId
//	public String[] getWxPrepayId(String openid, String oid) {
//		logger.info("获取getWxPrepayId  openid=" + openid + " oid=" + oid);
//		try {
//			TPorder orderTemp = orderService.findMallOrderByOid(oid);
//			if (orderTemp == null)
//				return null;
//			if (orderTemp.getSumPrice() <= 0)
//				return null;
//			double priceint = orderTemp.getSumPrice();
//			String price = String.valueOf(priceint);
//			if (payType.equals("T"))
//				price = "0.01";// 正式环境后需要屏蔽
//			String xml = creatWxQrcode(oid, price, openid);
//			Map<String, Object> xml_map = XMLParser.getMapFromXML(xml);
//			String args[] = new String[2];
//			args[0] = (String) xml_map.get("prepay_id");
//			args[1] = (String) xml_map.get("sign");
//			return args;
//		} catch (ParserConfigurationException e) {
//
//			e.printStackTrace();
//		} catch (IOException e) {
//
//			e.printStackTrace();
//		} catch (SAXException e) {
//
//			e.printStackTrace();
//		}
//
//		// return super.toContentView("payment", "wxpay");
//		return null;
//
//	}
//
//	public String creatWxQrcode(String oid, String price, String openid) {
//		logger.info("获取 creatWxQrcode beg");
//		String post_xml = "";
//		try {
//			WXPay testWx = new WXPay();
//			String appid = "";
//			String mch_id = "";
//			String nonce_str = "4R8264ILTKCH5y6P2502SI8ZNMTM67VS";
//			String sign = "";
//			String body = "殷康网手机支付订单";
//			// String out_trade_no = "4534534535";
//			String out_trade_no = "" + oid;
//			// int total_fee = 1;
//			double total_fee = 0;
//			String total_fee1 = "0";
//
//			if (price.equals("0.01")) {
//				total_fee = 1;
//				total_fee1 = "1";
//			} else {
//				total_fee = Double.parseDouble(price) * 100;
//				BigDecimal b = new BigDecimal(total_fee);
//				total_fee = b.setScale(0, BigDecimal.ROUND_HALF_UP).doubleValue();
//
//				String s = String.valueOf(total_fee);
//				String newD = s.substring(0, s.indexOf("."));
//				total_fee1 = newD;
//			}
//			// total_fee = Integer.parseInt(price)*100;
//			String spbill_create_ip = this.getRequest().getRemoteAddr();
//			String notify_url = indexUrl + "core/payMent.wx1QAZXSW2YKCallBack.do";
//
//			String trade_type = "JSAPI";
//
//			ScanAddOrderReqData scanAddOrderReqData = new ScanAddOrderReqData(appid, mch_id, nonce_str, body,
//					out_trade_no, total_fee1, spbill_create_ip, notify_url, trade_type, openid);
//			ResultListener r2 = new ResultListenerImpl2();
//			logger.info("获取 creatWxQrcode beg2");
//			post_xml = testWx.doAddOrderBusiness(scanAddOrderReqData, r2);
//			logger.info("获取 creatWxQrcode beg3 :" + post_xml);
//			int i = 0;
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		return post_xml;
//	}
//
//	// 微信授权回调
//	public String wxAuthonCallBack() {
//		Map<String, Object> res = new HashMap<String, Object>();
//		String code = this.getRequest().getParameter("code");
//		String state = this.getRequest().getParameter("state");
//		logger.info("微信授权回调wxAuthonCallBack: wx1qaz0okm9ijn2wsxCallBack: beg" + (new Date()).toLocaleString());
//
//		logger.info("state=" + state);
//		logger.info("code=" + code);
//		try {
//			WXPay wapPost = new WXPay();
//			String wapurl = "https://api.weixin.qq.com/sns/oauth2/access_token?";
//			wapurl += "appid=" + appid + "&secret=ec496b9b6940e653761d88aede0c3fc6&code=" + code
//					+ "&grant_type=authorization_code";
//			// https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code
//			logger.info("wapurl=" + wapurl);
//			ResultListener r2 = new ResultListenerImpl2();
//			String json = wapPost.getWapToken(wapurl, new ScanAddOrderReqData(), r2);
//			logger.info("====json=" + json);
//			JSONObject dataJson = JSONObject.fromObject(json);
//			String openid = (String) dataJson.get("openid");
//			logger.info("====openid=" + openid);
//			// 获取到微信调用统一下单接口后的预支付id，以此封装参数在界面调用js接口
//			String args[] = getWxPrepayId(openid, state);
//			logger.info(" args0=" + args[0] + "  \n args[1] =" + args[1]);
//			String timeStamp = String.valueOf(System.currentTimeMillis());
//			logger.info(" timeStamp=" + timeStamp.substring(0, 10));
//			res.put("appId", appid);
//			res.put("timeStamp", timeStamp.substring(0, 10));
//			res.put("nonceStr", RandomStringGenerator.getRandomStringByLength(32));
//			res.put("package", "prepay_id=" + args[0]);
//			res.put("signType", "MD5");
//			String sign = Signature.getSign(res);
//
//			res.put("sign", sign);
//			logger.info("====res=" + res);
//			this.getRequest().setAttribute("data", res);
//			this.getRequest().setAttribute("oid", state);
//
//		} catch (Exception e) {
//
//			logger.info(e.toString());
//		}
//		return super.toContentView("payMent", "mallWx_wap_pay");
//
//	}
//
//	// 微信支付回调
//	public String wx1QAZXSW2YKCallBack() {
//
//		logger.info("微信支付回调 beg%%%%:" + (new Date()).toLocaleString());
//		HttpServletRequest request = this.getRequest();
//		HttpServletResponse response = this.getResponse();
//		String result = "";
//		// 示例报文
//		// String xml =
//		// "<xml><appid><![CDATA[wxb4dc385f953b356e]]></appid><bank_type><![CDATA[CCB_CREDIT]]></bank_type><cash_fee><![CDATA[1]]></cash_fee><fee_type><![CDATA[CNY]]></fee_type><is_subscribe><![CDATA[Y]]></is_subscribe><mch_id><![CDATA[1228442802]]></mch_id><nonce_str><![CDATA[1002477130]]></nonce_str><openid><![CDATA[o-HREuJzRr3moMvv990VdfnQ8x4k]]></openid><out_trade_no><![CDATA[1000000000051249]]></out_trade_no><result_code><![CDATA[SUCCESS]]></result_code><return_code><![CDATA[SUCCESS]]></return_code><sign><![CDATA[1269E03E43F2B8C388A414EDAE185CEE]]></sign><time_end><![CDATA[20150324100405]]></time_end><total_fee>1</total_fee><trade_type><![CDATA[JSAPI]]></trade_type><transaction_id><![CDATA[1009530574201503240036299496]]></transaction_id></xml>";
//		String inputLine;
//		String notityXml = "";
//		String resXml = "";
//		// String s1= request.getParameter("return_code");
//		try {
//			while ((inputLine = request.getReader().readLine()) != null) {
//				notityXml += inputLine;
//			}
//			request.getReader().close();
//		} catch (Exception e) {
//			e.printStackTrace();
//			logger.info("微信支付回调 异常:" + (new Date()).toLocaleString());
//		}
//
//		logger.info("微信支付回调接收到的报文:" + (new Date()).toLocaleString() + "  " + notityXml);
//		// System.out.println("接收到的报文：" + notityXml);
//
//		Map m = parseXmlToList2(notityXml);
//		// WxPayResult wpr = new WxPayResult();
//		// wpr.setAppid(m.get("appid").toString());
//		String return_code = m.get("return_code").toString();
//		String oid = m.get("out_trade_no").toString();
//		String total_fee = m.get("total_fee").toString();
//		logger.info("微信支付return_code报文:" + (new Date()).toLocaleString() + "  " + return_code);
//		logger.info("微信支付out_trade_no报文:" + oid);
//		if ("SUCCESS".equals(return_code)) {
//			Map<String, String> orderMap = new HashMap<String, String>();
//			orderMap.put("orderId", oid);
//			orderMap.put("pc_pay_type", "50101");
//			orderMap.put("total_fee", String.valueOf(Double.parseDouble(total_fee) / 100));
//			// orderMap.put("total_fee", "201101");
//			orderService.updateMallOrder(orderMap, oid, "5");
//
//			// 支付成功
//			resXml = "<xml>" + "<return_code><![CDATA[SUCCESS]]></return_code>"
//					+ "<return_msg><![CDATA[OK]]></return_msg>" + "</xml> ";
//		} else {
//			resXml = "<xml>" + "<return_code><![CDATA[FAIL]]></return_code>"
//					+ "<return_msg><![CDATA[报文为空]]></return_msg>" + "</xml> ";
//		}
//		logger.info("微信支付回调数据结束");
//
//		try {
//			BufferedOutputStream out3 = new BufferedOutputStream(response.getOutputStream());
//			logger.info("微信支付resXml.getBytes()报文:" + resXml.getBytes());
//			out3.write(resXml.getBytes());
//			out3.flush();
//			out3.close();
//		} catch (IOException e) {
//
//			e.printStackTrace();
//		}
//		// forward = "/index/weChatPayTable.jsp";
//		return resXml;
//	}
//
//	private Map parseXmlToList2(String xml) {
//		logger.info("微信支付解析xml参数: parseXmlToList2: beg" + (new Date()).toLocaleString());
//		Map retMap = new HashMap();
//		try {
//			StringReader read = new StringReader(xml);
//			// 创建新的输入源SAX 解析器将使用 InputSource 对象来确定如何读取 XML 输入
//			InputSource source = new InputSource(read);
//			// 创建一个新的SAXBuilder
//			SAXBuilder sb = new SAXBuilder();
//			// 通过输入源构造一个Document
//			org.jdom.Document doc = sb.build(source);
//			Element root = (Element) doc.getRootElement();// 指向根节点
//			List<Element> es = root.getChildren();
//			if (es != null && es.size() != 0) {
//				for (Element element : es) {
//					retMap.put(element.getName(), element.getValue());
//				}
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		logger.info("微信支付解析xml参数: parseXmlToList2: end" + (new Date()).toLocaleString());
//		return retMap;
//	}
//	// 修改微信服务器配置(未启用)需要验证服务器的url 不是支付回调的url
//
//	public String wxSynchronizeYKCallBack() {
//		try {
//			String oid = this.getRequest().getParameter("oid");
//			order = orderService.findMallOrderByOid(oid);
//			HashMap<String, Object> map = orderService.checkMallCount(oid);
//
//			this.getRequest().setAttribute("order", order);
//			this.getRequest().setAttribute("map", map);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//
//		return super.toContentView("payMent", "mallPay_success");
//	}
}
